//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 27 files.
  struct file {
    /// Resource file `.swiftlint.yml`.
    static let swiftlintYml = Rswift.FileResource(bundle: R.hostingBundle, name: ".swiftlint", pathExtension: "yml")
    /// Resource file `AveriaLibre-B.ttf`.
    static let averiaLibreBTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AveriaLibre-B", pathExtension: "ttf")
    /// Resource file `AveriaLibre-BI.ttf`.
    static let averiaLibreBITtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AveriaLibre-BI", pathExtension: "ttf")
    /// Resource file `AveriaLibre-L.ttf`.
    static let averiaLibreLTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AveriaLibre-L", pathExtension: "ttf")
    /// Resource file `AveriaLibre.ttf`.
    static let averiaLibreTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AveriaLibre", pathExtension: "ttf")
    /// Resource file `CLCountryPickerController.bundle`.
    static let cLCountryPickerControllerBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "CLCountryPickerController", pathExtension: "bundle")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `GoogleSignIn.bundle`.
    static let googleSignInBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleSignIn", pathExtension: "bundle")
    /// Resource file `Libraries.rtf`.
    static let librariesRtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Libraries", pathExtension: "rtf")
    /// Resource file `Poppins-Black.ttf`.
    static let poppinsBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Black", pathExtension: "ttf")
    /// Resource file `Poppins-BlackItalic.ttf`.
    static let poppinsBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-BlackItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Bold.ttf`.
    static let poppinsBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Bold", pathExtension: "ttf")
    /// Resource file `Poppins-BoldItalic.ttf`.
    static let poppinsBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-BoldItalic", pathExtension: "ttf")
    /// Resource file `Poppins-ExtraBold.ttf`.
    static let poppinsExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ExtraBold", pathExtension: "ttf")
    /// Resource file `Poppins-ExtraBoldItalic.ttf`.
    static let poppinsExtraBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ExtraBoldItalic", pathExtension: "ttf")
    /// Resource file `Poppins-ExtraLight.ttf`.
    static let poppinsExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ExtraLight", pathExtension: "ttf")
    /// Resource file `Poppins-ExtraLightItalic.ttf`.
    static let poppinsExtraLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ExtraLightItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Italic.ttf`.
    static let poppinsItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Italic", pathExtension: "ttf")
    /// Resource file `Poppins-Light.ttf`.
    static let poppinsLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Light", pathExtension: "ttf")
    /// Resource file `Poppins-LightItalic.ttf`.
    static let poppinsLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-LightItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Medium.ttf`.
    static let poppinsMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Medium", pathExtension: "ttf")
    /// Resource file `Poppins-MediumItalic.ttf`.
    static let poppinsMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-MediumItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Regular.ttf`.
    static let poppinsRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Regular", pathExtension: "ttf")
    /// Resource file `Poppins-SemiBold.ttf`.
    static let poppinsSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-SemiBold", pathExtension: "ttf")
    /// Resource file `Poppins-SemiBoldItalic.ttf`.
    static let poppinsSemiBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-SemiBoldItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Thin.ttf`.
    static let poppinsThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Thin", pathExtension: "ttf")
    /// Resource file `Poppins-ThinItalic.ttf`.
    static let poppinsThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ThinItalic", pathExtension: "ttf")
    
    /// `bundle.url(forResource: ".swiftlint", withExtension: "yml")`
    static func swiftlintYml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftlintYml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "AveriaLibre", withExtension: "ttf")`
    static func averiaLibreTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.averiaLibreTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "AveriaLibre-B", withExtension: "ttf")`
    static func averiaLibreBTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.averiaLibreBTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "AveriaLibre-BI", withExtension: "ttf")`
    static func averiaLibreBITtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.averiaLibreBITtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "AveriaLibre-L", withExtension: "ttf")`
    static func averiaLibreLTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.averiaLibreLTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "CLCountryPickerController", withExtension: "bundle")`
    static func cLCountryPickerControllerBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cLCountryPickerControllerBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GoogleSignIn", withExtension: "bundle")`
    static func googleSignInBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleSignInBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Libraries", withExtension: "rtf")`
    static func librariesRtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.librariesRtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Poppins-Black", withExtension: "ttf")`
    static func poppinsBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Poppins-BlackItalic", withExtension: "ttf")`
    static func poppinsBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Poppins-Bold", withExtension: "ttf")`
    static func poppinsBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Poppins-BoldItalic", withExtension: "ttf")`
    static func poppinsBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Poppins-ExtraBold", withExtension: "ttf")`
    static func poppinsExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Poppins-ExtraBoldItalic", withExtension: "ttf")`
    static func poppinsExtraBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsExtraBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Poppins-ExtraLight", withExtension: "ttf")`
    static func poppinsExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Poppins-ExtraLightItalic", withExtension: "ttf")`
    static func poppinsExtraLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsExtraLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Poppins-Italic", withExtension: "ttf")`
    static func poppinsItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Poppins-Light", withExtension: "ttf")`
    static func poppinsLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Poppins-LightItalic", withExtension: "ttf")`
    static func poppinsLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Poppins-Medium", withExtension: "ttf")`
    static func poppinsMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Poppins-MediumItalic", withExtension: "ttf")`
    static func poppinsMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Poppins-Regular", withExtension: "ttf")`
    static func poppinsRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Poppins-SemiBold", withExtension: "ttf")`
    static func poppinsSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Poppins-SemiBoldItalic", withExtension: "ttf")`
    static func poppinsSemiBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsSemiBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Poppins-Thin", withExtension: "ttf")`
    static func poppinsThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Poppins-ThinItalic", withExtension: "ttf")`
    static func poppinsThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 22 fonts.
  struct font: Rswift.Validatable {
    /// Font `AveriaLibre-BoldItalic`.
    static let averiaLibreBoldItalic = Rswift.FontResource(fontName: "AveriaLibre-BoldItalic")
    /// Font `AveriaLibre-Bold`.
    static let averiaLibreBold = Rswift.FontResource(fontName: "AveriaLibre-Bold")
    /// Font `AveriaLibre-Light`.
    static let averiaLibreLight = Rswift.FontResource(fontName: "AveriaLibre-Light")
    /// Font `AveriaLibre-Regular`.
    static let averiaLibreRegular = Rswift.FontResource(fontName: "AveriaLibre-Regular")
    /// Font `Poppins-BlackItalic`.
    static let poppinsBlackItalic = Rswift.FontResource(fontName: "Poppins-BlackItalic")
    /// Font `Poppins-Black`.
    static let poppinsBlack = Rswift.FontResource(fontName: "Poppins-Black")
    /// Font `Poppins-BoldItalic`.
    static let poppinsBoldItalic = Rswift.FontResource(fontName: "Poppins-BoldItalic")
    /// Font `Poppins-Bold`.
    static let poppinsBold = Rswift.FontResource(fontName: "Poppins-Bold")
    /// Font `Poppins-ExtraBoldItalic`.
    static let poppinsExtraBoldItalic = Rswift.FontResource(fontName: "Poppins-ExtraBoldItalic")
    /// Font `Poppins-ExtraBold`.
    static let poppinsExtraBold = Rswift.FontResource(fontName: "Poppins-ExtraBold")
    /// Font `Poppins-ExtraLightItalic`.
    static let poppinsExtraLightItalic = Rswift.FontResource(fontName: "Poppins-ExtraLightItalic")
    /// Font `Poppins-ExtraLight`.
    static let poppinsExtraLight = Rswift.FontResource(fontName: "Poppins-ExtraLight")
    /// Font `Poppins-Italic`.
    static let poppinsItalic = Rswift.FontResource(fontName: "Poppins-Italic")
    /// Font `Poppins-LightItalic`.
    static let poppinsLightItalic = Rswift.FontResource(fontName: "Poppins-LightItalic")
    /// Font `Poppins-Light`.
    static let poppinsLight = Rswift.FontResource(fontName: "Poppins-Light")
    /// Font `Poppins-MediumItalic`.
    static let poppinsMediumItalic = Rswift.FontResource(fontName: "Poppins-MediumItalic")
    /// Font `Poppins-Medium`.
    static let poppinsMedium = Rswift.FontResource(fontName: "Poppins-Medium")
    /// Font `Poppins-Regular`.
    static let poppinsRegular = Rswift.FontResource(fontName: "Poppins-Regular")
    /// Font `Poppins-SemiBoldItalic`.
    static let poppinsSemiBoldItalic = Rswift.FontResource(fontName: "Poppins-SemiBoldItalic")
    /// Font `Poppins-SemiBold`.
    static let poppinsSemiBold = Rswift.FontResource(fontName: "Poppins-SemiBold")
    /// Font `Poppins-ThinItalic`.
    static let poppinsThinItalic = Rswift.FontResource(fontName: "Poppins-ThinItalic")
    /// Font `Poppins-Thin`.
    static let poppinsThin = Rswift.FontResource(fontName: "Poppins-Thin")
    
    /// `UIFont(name: "AveriaLibre-Bold", size: ...)`
    static func averiaLibreBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: averiaLibreBold, size: size)
    }
    
    /// `UIFont(name: "AveriaLibre-BoldItalic", size: ...)`
    static func averiaLibreBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: averiaLibreBoldItalic, size: size)
    }
    
    /// `UIFont(name: "AveriaLibre-Light", size: ...)`
    static func averiaLibreLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: averiaLibreLight, size: size)
    }
    
    /// `UIFont(name: "AveriaLibre-Regular", size: ...)`
    static func averiaLibreRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: averiaLibreRegular, size: size)
    }
    
    /// `UIFont(name: "Poppins-Black", size: ...)`
    static func poppinsBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBlack, size: size)
    }
    
    /// `UIFont(name: "Poppins-BlackItalic", size: ...)`
    static func poppinsBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBlackItalic, size: size)
    }
    
    /// `UIFont(name: "Poppins-Bold", size: ...)`
    static func poppinsBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBold, size: size)
    }
    
    /// `UIFont(name: "Poppins-BoldItalic", size: ...)`
    static func poppinsBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBoldItalic, size: size)
    }
    
    /// `UIFont(name: "Poppins-ExtraBold", size: ...)`
    static func poppinsExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraBold, size: size)
    }
    
    /// `UIFont(name: "Poppins-ExtraBoldItalic", size: ...)`
    static func poppinsExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraBoldItalic, size: size)
    }
    
    /// `UIFont(name: "Poppins-ExtraLight", size: ...)`
    static func poppinsExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraLight, size: size)
    }
    
    /// `UIFont(name: "Poppins-ExtraLightItalic", size: ...)`
    static func poppinsExtraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraLightItalic, size: size)
    }
    
    /// `UIFont(name: "Poppins-Italic", size: ...)`
    static func poppinsItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsItalic, size: size)
    }
    
    /// `UIFont(name: "Poppins-Light", size: ...)`
    static func poppinsLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsLight, size: size)
    }
    
    /// `UIFont(name: "Poppins-LightItalic", size: ...)`
    static func poppinsLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsLightItalic, size: size)
    }
    
    /// `UIFont(name: "Poppins-Medium", size: ...)`
    static func poppinsMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsMedium, size: size)
    }
    
    /// `UIFont(name: "Poppins-MediumItalic", size: ...)`
    static func poppinsMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsMediumItalic, size: size)
    }
    
    /// `UIFont(name: "Poppins-Regular", size: ...)`
    static func poppinsRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsRegular, size: size)
    }
    
    /// `UIFont(name: "Poppins-SemiBold", size: ...)`
    static func poppinsSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsSemiBold, size: size)
    }
    
    /// `UIFont(name: "Poppins-SemiBoldItalic", size: ...)`
    static func poppinsSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsSemiBoldItalic, size: size)
    }
    
    /// `UIFont(name: "Poppins-Thin", size: ...)`
    static func poppinsThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsThin, size: size)
    }
    
    /// `UIFont(name: "Poppins-ThinItalic", size: ...)`
    static func poppinsThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsThinItalic, size: size)
    }
    
    static func validate() throws {
      if R.font.poppinsLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-LightItalic' could not be loaded, is 'Poppins-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-BlackItalic' could not be loaded, is 'Poppins-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Light' could not be loaded, is 'Poppins-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Regular' could not be loaded, is 'Poppins-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraBold' could not be loaded, is 'Poppins-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraLightItalic' could not be loaded, is 'Poppins-ExtraLightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraLight' could not be loaded, is 'Poppins-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Thin' could not be loaded, is 'Poppins-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.averiaLibreBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AveriaLibre-Bold' could not be loaded, is 'AveriaLibre-B.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.averiaLibreLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AveriaLibre-Light' could not be loaded, is 'AveriaLibre-L.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraBoldItalic' could not be loaded, is 'Poppins-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-BoldItalic' could not be loaded, is 'Poppins-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Black' could not be loaded, is 'Poppins-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-MediumItalic' could not be loaded, is 'Poppins-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Bold' could not be loaded, is 'Poppins-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Medium' could not be loaded, is 'Poppins-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-SemiBoldItalic' could not be loaded, is 'Poppins-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Italic' could not be loaded, is 'Poppins-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ThinItalic' could not be loaded, is 'Poppins-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.averiaLibreRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AveriaLibre-Regular' could not be loaded, is 'AveriaLibre.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.averiaLibreBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AveriaLibre-BoldItalic' could not be loaded, is 'AveriaLibre-BI.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-SemiBold' could not be loaded, is 'Poppins-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 66 images.
  struct image {
    /// Image `CL-Logo`.
    static let cLLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "CL-Logo")
    /// Image `CL-logo-name`.
    static let cLLogoName = Rswift.ImageResource(bundle: R.hostingBundle, name: "CL-logo-name")
    /// Image `CL-logo-withText`.
    static let cLLogoWithText = Rswift.ImageResource(bundle: R.hostingBundle, name: "CL-logo-withText")
    /// Image `ChickenRoll`.
    static let chickenRoll = Rswift.ImageResource(bundle: R.hostingBundle, name: "ChickenRoll")
    /// Image `GoogleIcon`.
    static let googleIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "GoogleIcon")
    /// Image `back-White`.
    static let backWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "back-White")
    /// Image `back_btn_on`.
    static let back_btn_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_btn_on")
    /// Image `bitmap img`.
    static let bitmapImg = Rswift.ImageResource(bundle: R.hostingBundle, name: "bitmap img")
    /// Image `burgrill`.
    static let burgrill = Rswift.ImageResource(bundle: R.hostingBundle, name: "burgrill")
    /// Image `call`.
    static let call = Rswift.ImageResource(bundle: R.hostingBundle, name: "call")
    /// Image `camera`.
    static let camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera")
    /// Image `dropdown`.
    static let dropdown = Rswift.ImageResource(bundle: R.hostingBundle, name: "dropdown")
    /// Image `facebookIcon`.
    static let facebookIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebookIcon")
    /// Image `foodstarPlaceholder`.
    static let foodstarPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "foodstarPlaceholder")
    /// Image `ic_add`.
    static let ic_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add")
    /// Image `ic_amount`.
    static let ic_amount = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_amount")
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `ic_bg_blur`.
    static let ic_bg_blur = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bg_blur")
    /// Image `ic_bg_normal`.
    static let ic_bg_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bg_normal")
    /// Image `ic_bg_signUp`.
    static let ic_bg_signUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bg_signUp")
    /// Image `ic_bg`.
    static let ic_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bg")
    /// Image `ic_burgergrill`.
    static let ic_burgergrill = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_burgergrill")
    /// Image `ic_cancel`.
    static let ic_cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cancel")
    /// Image `ic_card`.
    static let ic_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_card")
    /// Image `ic_cart`.
    static let ic_cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cart")
    /// Image `ic_cash`.
    static let ic_cash = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cash")
    /// Image `ic_chinese`.
    static let ic_chinese = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chinese")
    /// Image `ic_delivery`.
    static let ic_delivery = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delivery")
    /// Image `ic_edit`.
    static let ic_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_edit")
    /// Image `ic_fb`.
    static let ic_fb = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_fb")
    /// Image `ic_google`.
    static let ic_google = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_google")
    /// Image `ic_grid`.
    static let ic_grid = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_grid")
    /// Image `ic_homeDelivery`.
    static let ic_homeDelivery = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_homeDelivery")
    /// Image `ic_indian`.
    static let ic_indian = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_indian")
    /// Image `ic_italian`.
    static let ic_italian = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_italian")
    /// Image `ic_launch`.
    static let ic_launch = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_launch")
    /// Image `ic_logoSplash`.
    static let ic_logoSplash = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logoSplash")
    /// Image `ic_logo_small`.
    static let ic_logo_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logo_small")
    /// Image `ic_maps`.
    static let ic_maps = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_maps")
    /// Image `ic_menu`.
    static let ic_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `ic_nonVeg`.
    static let ic_nonVeg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_nonVeg")
    /// Image `ic_oval_selected-1`.
    static let ic_oval_selected1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_oval_selected-1")
    /// Image `ic_oval_selected`.
    static let ic_oval_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_oval_selected")
    /// Image `ic_placeholderBg`.
    static let ic_placeholderBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_placeholderBg")
    /// Image `ic_placeholder`.
    static let ic_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_placeholder")
    /// Image `ic_search`.
    static let ic_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search")
    /// Image `ic_selfPickup`.
    static let ic_selfPickup = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_selfPickup")
    /// Image `ic_settings`.
    static let ic_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_settings")
    /// Image `ic_sideMenuBg1`.
    static let ic_sideMenuBg1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sideMenuBg1")
    /// Image `ic_sideMenuBg`.
    static let ic_sideMenuBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sideMenuBg")
    /// Image `ic_sponser`.
    static let ic_sponser = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sponser")
    /// Image `ic_subtract`.
    static let ic_subtract = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_subtract")
    /// Image `ic_thai`.
    static let ic_thai = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_thai")
    /// Image `ic_time`.
    static let ic_time = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_time")
    /// Image `ic_tutorial1`.
    static let ic_tutorial1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tutorial1")
    /// Image `ic_tutorial_logo`.
    static let ic_tutorial_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tutorial_logo")
    /// Image `ic_twitterLogo`.
    static let ic_twitterLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_twitterLogo")
    /// Image `ic_veg`.
    static let ic_veg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_veg")
    /// Image `mapMarker`.
    static let mapMarker = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapMarker")
    /// Image `menuItem`.
    static let menuItem = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuItem")
    /// Image `next`.
    static let next = Rswift.ImageResource(bundle: R.hostingBundle, name: "next")
    /// Image `placeholder2_2`.
    static let placeholder2_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder2_2")
    /// Image `restaurant`.
    static let restaurant = Rswift.ImageResource(bundle: R.hostingBundle, name: "restaurant")
    /// Image `selectedgrid`.
    static let selectedgrid = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedgrid")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
    /// Image `tickMark`.
    static let tickMark = Rswift.ImageResource(bundle: R.hostingBundle, name: "tickMark")
    
    /// `UIImage(named: "CL-Logo", bundle: ..., traitCollection: ...)`
    static func cLLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cLLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CL-logo-name", bundle: ..., traitCollection: ...)`
    static func cLLogoName(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cLLogoName, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CL-logo-withText", bundle: ..., traitCollection: ...)`
    static func cLLogoWithText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cLLogoWithText, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ChickenRoll", bundle: ..., traitCollection: ...)`
    static func chickenRoll(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chickenRoll, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "GoogleIcon", bundle: ..., traitCollection: ...)`
    static func googleIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googleIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back-White", bundle: ..., traitCollection: ...)`
    static func backWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back_btn_on", bundle: ..., traitCollection: ...)`
    static func back_btn_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_btn_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bitmap img", bundle: ..., traitCollection: ...)`
    static func bitmapImg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bitmapImg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "burgrill", bundle: ..., traitCollection: ...)`
    static func burgrill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.burgrill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "call", bundle: ..., traitCollection: ...)`
    static func call(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.call, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "camera", bundle: ..., traitCollection: ...)`
    static func camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dropdown", bundle: ..., traitCollection: ...)`
    static func dropdown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dropdown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "facebookIcon", bundle: ..., traitCollection: ...)`
    static func facebookIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebookIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "foodstarPlaceholder", bundle: ..., traitCollection: ...)`
    static func foodstarPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.foodstarPlaceholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_add", bundle: ..., traitCollection: ...)`
    static func ic_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_amount", bundle: ..., traitCollection: ...)`
    static func ic_amount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_amount, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_bg", bundle: ..., traitCollection: ...)`
    static func ic_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_bg_blur", bundle: ..., traitCollection: ...)`
    static func ic_bg_blur(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bg_blur, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_bg_normal", bundle: ..., traitCollection: ...)`
    static func ic_bg_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bg_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_bg_signUp", bundle: ..., traitCollection: ...)`
    static func ic_bg_signUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bg_signUp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_burgergrill", bundle: ..., traitCollection: ...)`
    static func ic_burgergrill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_burgergrill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cancel", bundle: ..., traitCollection: ...)`
    static func ic_cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cancel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_card", bundle: ..., traitCollection: ...)`
    static func ic_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_card, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cart", bundle: ..., traitCollection: ...)`
    static func ic_cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cash", bundle: ..., traitCollection: ...)`
    static func ic_cash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cash, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_chinese", bundle: ..., traitCollection: ...)`
    static func ic_chinese(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chinese, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_delivery", bundle: ..., traitCollection: ...)`
    static func ic_delivery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delivery, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_edit", bundle: ..., traitCollection: ...)`
    static func ic_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_fb", bundle: ..., traitCollection: ...)`
    static func ic_fb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_fb, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_google", bundle: ..., traitCollection: ...)`
    static func ic_google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_google, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_grid", bundle: ..., traitCollection: ...)`
    static func ic_grid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_grid, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_homeDelivery", bundle: ..., traitCollection: ...)`
    static func ic_homeDelivery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_homeDelivery, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_indian", bundle: ..., traitCollection: ...)`
    static func ic_indian(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_indian, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_italian", bundle: ..., traitCollection: ...)`
    static func ic_italian(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_italian, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_launch", bundle: ..., traitCollection: ...)`
    static func ic_launch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_launch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_logoSplash", bundle: ..., traitCollection: ...)`
    static func ic_logoSplash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logoSplash, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_logo_small", bundle: ..., traitCollection: ...)`
    static func ic_logo_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logo_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_maps", bundle: ..., traitCollection: ...)`
    static func ic_maps(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_maps, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_menu", bundle: ..., traitCollection: ...)`
    static func ic_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_nonVeg", bundle: ..., traitCollection: ...)`
    static func ic_nonVeg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_nonVeg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_oval_selected", bundle: ..., traitCollection: ...)`
    static func ic_oval_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_oval_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_oval_selected-1", bundle: ..., traitCollection: ...)`
    static func ic_oval_selected1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_oval_selected1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_placeholder", bundle: ..., traitCollection: ...)`
    static func ic_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_placeholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_placeholderBg", bundle: ..., traitCollection: ...)`
    static func ic_placeholderBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_placeholderBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_search", bundle: ..., traitCollection: ...)`
    static func ic_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_selfPickup", bundle: ..., traitCollection: ...)`
    static func ic_selfPickup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_selfPickup, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_settings", bundle: ..., traitCollection: ...)`
    static func ic_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_sideMenuBg", bundle: ..., traitCollection: ...)`
    static func ic_sideMenuBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sideMenuBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_sideMenuBg1", bundle: ..., traitCollection: ...)`
    static func ic_sideMenuBg1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sideMenuBg1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_sponser", bundle: ..., traitCollection: ...)`
    static func ic_sponser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sponser, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_subtract", bundle: ..., traitCollection: ...)`
    static func ic_subtract(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_subtract, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_thai", bundle: ..., traitCollection: ...)`
    static func ic_thai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_thai, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_time", bundle: ..., traitCollection: ...)`
    static func ic_time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_time, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tutorial1", bundle: ..., traitCollection: ...)`
    static func ic_tutorial1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tutorial1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tutorial_logo", bundle: ..., traitCollection: ...)`
    static func ic_tutorial_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tutorial_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_twitterLogo", bundle: ..., traitCollection: ...)`
    static func ic_twitterLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_twitterLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_veg", bundle: ..., traitCollection: ...)`
    static func ic_veg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_veg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mapMarker", bundle: ..., traitCollection: ...)`
    static func mapMarker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapMarker, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menuItem", bundle: ..., traitCollection: ...)`
    static func menuItem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuItem, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "next", bundle: ..., traitCollection: ...)`
    static func next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.next, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder2_2", bundle: ..., traitCollection: ...)`
    static func placeholder2_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder2_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "restaurant", bundle: ..., traitCollection: ...)`
    static func restaurant(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.restaurant, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "selectedgrid", bundle: ..., traitCollection: ...)`
    static func selectedgrid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedgrid, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tickMark", bundle: ..., traitCollection: ...)`
    static func tickMark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tickMark, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 12 nibs.
  struct nib {
    /// Nib `AddMoreItemView`.
    static let addMoreItemView = _R.nib._AddMoreItemView()
    /// Nib `CLCountryCell`.
    static let cLCountryCell = _R.nib._CLCountryCell()
    /// Nib `CLCountryPickerController`.
    static let cLCountryPickerController = _R.nib._CLCountryPickerController()
    /// Nib `CustomMenuItem`.
    static let customMenuItem = _R.nib._CustomMenuItem()
    /// Nib `FieldCell`.
    static let fieldCell = _R.nib._FieldCell()
    /// Nib `GridCollectionView`.
    static let gridCollectionView = _R.nib._GridCollectionView()
    /// Nib `GridMenuCollectioncell`.
    static let gridMenuCollectioncell = _R.nib._GridMenuCollectioncell()
    /// Nib `MapCollectionViewCell`.
    static let mapCollectionViewCell = _R.nib._MapCollectionViewCell()
    /// Nib `MenuTableViewCell`.
    static let menuTableViewCell = _R.nib._MenuTableViewCell()
    /// Nib `RestaurantItemCollectionViewCell`.
    static let restaurantItemCollectionViewCell = _R.nib._RestaurantItemCollectionViewCell()
    /// Nib `RestaurentCollectionViewCell`.
    static let restaurentCollectionViewCell = _R.nib._RestaurentCollectionViewCell()
    /// Nib `SideMenuCell`.
    static let sideMenuCell = _R.nib._SideMenuCell()
    
    /// `UINib(name: "AddMoreItemView", in: bundle)`
    static func addMoreItemView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addMoreItemView)
    }
    
    /// `UINib(name: "CLCountryCell", in: bundle)`
    static func cLCountryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cLCountryCell)
    }
    
    /// `UINib(name: "CLCountryPickerController", in: bundle)`
    static func cLCountryPickerController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cLCountryPickerController)
    }
    
    /// `UINib(name: "CustomMenuItem", in: bundle)`
    static func customMenuItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customMenuItem)
    }
    
    /// `UINib(name: "FieldCell", in: bundle)`
    static func fieldCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fieldCell)
    }
    
    /// `UINib(name: "GridCollectionView", in: bundle)`
    static func gridCollectionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gridCollectionView)
    }
    
    /// `UINib(name: "GridMenuCollectioncell", in: bundle)`
    static func gridMenuCollectioncell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gridMenuCollectioncell)
    }
    
    /// `UINib(name: "MapCollectionViewCell", in: bundle)`
    static func mapCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mapCollectionViewCell)
    }
    
    /// `UINib(name: "MenuTableViewCell", in: bundle)`
    static func menuTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuTableViewCell)
    }
    
    /// `UINib(name: "RestaurantItemCollectionViewCell", in: bundle)`
    static func restaurantItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.restaurantItemCollectionViewCell)
    }
    
    /// `UINib(name: "RestaurentCollectionViewCell", in: bundle)`
    static func restaurentCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.restaurentCollectionViewCell)
    }
    
    /// `UINib(name: "SideMenuCell", in: bundle)`
    static func sideMenuCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sideMenuCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 14 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CuisineCollectionCell`.
    static let cuisineCollectionCell: Rswift.ReuseIdentifier<CuisineCollectionCell> = Rswift.ReuseIdentifier(identifier: "CuisineCollectionCell")
    /// Reuse identifier `CuisineTableCell`.
    static let cuisineTableCell: Rswift.ReuseIdentifier<CuisineTableCell> = Rswift.ReuseIdentifier(identifier: "CuisineTableCell")
    /// Reuse identifier `GridCollectionView`.
    static let gridCollectionView: Rswift.ReuseIdentifier<GridCollectionView> = Rswift.ReuseIdentifier(identifier: "GridCollectionView")
    /// Reuse identifier `GridMenuCollectioncell`.
    static let gridMenuCollectioncell: Rswift.ReuseIdentifier<GridMenuCollectioncell> = Rswift.ReuseIdentifier(identifier: "GridMenuCollectioncell")
    /// Reuse identifier `MapCollectionViewCell`.
    static let mapCollectionViewCell: Rswift.ReuseIdentifier<MapCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "MapCollectionViewCell")
    /// Reuse identifier `MenuTableViewCell`.
    static let menuTableViewCell: Rswift.ReuseIdentifier<MenuTableViewCell> = Rswift.ReuseIdentifier(identifier: "MenuTableViewCell")
    /// Reuse identifier `RestaurantItemCollectionViewCell`.
    static let restaurantItemCollectionViewCell: Rswift.ReuseIdentifier<RestaurantItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "RestaurantItemCollectionViewCell")
    /// Reuse identifier `RestaurentCollectionViewCell`.
    static let restaurentCollectionViewCell: Rswift.ReuseIdentifier<RestaurentCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "RestaurentCollectionViewCell")
    /// Reuse identifier `RestaurentTableCell`.
    static let restaurentTableCell: Rswift.ReuseIdentifier<RestaurentTableCell> = Rswift.ReuseIdentifier(identifier: "RestaurentTableCell")
    /// Reuse identifier `SectionCell`.
    static let sectionCell: Rswift.ReuseIdentifier<SectionCell> = Rswift.ReuseIdentifier(identifier: "SectionCell")
    /// Reuse identifier `SideMenuCell`.
    static let sideMenuCell: Rswift.ReuseIdentifier<SideMenuCell> = Rswift.ReuseIdentifier(identifier: "SideMenuCell")
    /// Reuse identifier `SponserCollectionCell`.
    static let sponserCollectionCell: Rswift.ReuseIdentifier<SponserCollectionCell> = Rswift.ReuseIdentifier(identifier: "SponserCollectionCell")
    /// Reuse identifier `SponserTableCell`.
    static let sponserTableCell: Rswift.ReuseIdentifier<SponserTableCell> = Rswift.ReuseIdentifier(identifier: "SponserTableCell")
    /// Reuse identifier `TutorialCollectionCell`.
    static let tutorialCollectionCell: Rswift.ReuseIdentifier<TutorialCollectionCell> = Rswift.ReuseIdentifier(identifier: "TutorialCollectionCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    
    
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 72 localization keys.
    struct localizable {
      /// Base translation: ******* ENGLISH  *********
      /// 
      /// Locales: Base
      static let currentLanguage = Rswift.StringResource(key: "CurrentLanguage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: A special character is mandatory
      /// 
      /// Locales: Base
      static let aSpecialCharacterIsMandatory = Rswift.StringResource(key: "A special character is mandatory", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: A special symbol is mandatory
      /// 
      /// Locales: Base
      static let aSpecialSymbolIsMandatory = Rswift.StringResource(key: "A special symbol is mandatory", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: All Fields ARE Filled = %@
      /// 
      /// Locales: Base
      static let allFieldsAREFilled = Rswift.StringResource(key: "All Fields ARE Filled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: All Fields Are Validate = %@
      /// 
      /// Locales: Base
      static let allFieldsAreValidate = Rswift.StringResource(key: "All Fields Are Validate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: By Signing up you agree to our Terms of Service & that you have read our Privacy Policy
      /// 
      /// Locales: Base
      static let tOSTitle = Rswift.StringResource(key: "TOSTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: CREATE ACCOUNT
      /// 
      /// Locales: Base
      static let cREATEACCOUNT = Rswift.StringResource(key: "CREATE ACCOUNT", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Cancel
      /// 
      /// Locales: Base
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Change Your Authorization Status
      /// 
      /// Locales: Base
      static let changeYourAuthorizationStatus = Rswift.StringResource(key: "Change Your Authorization Status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Chat Support
      /// 
      /// Locales: Base
      static let chatSupport = Rswift.StringResource(key: "ChatSupport", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Check Validations
      /// 
      /// Locales: Base
      static let checkValidations = Rswift.StringResource(key: "Check Validations", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Confirm Email
      /// 
      /// Locales: Base
      static let confirmEmail = Rswift.StringResource(key: "Confirm Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Confirm Password (6 Digit Password)
      /// 
      /// Locales: Base
      static let confirmPasswordPlaceholder = Rswift.StringResource(key: "confirmPasswordPlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Confirm password
      /// 
      /// Locales: Base
      static let confirmPassword = Rswift.StringResource(key: "ConfirmPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Current Authorization status is Denied, Change the authorization status in Settings. To enable, please go to Settings->Privacy->Location Services
      /// 
      /// Locales: Base
      static let location_Authorization_Denied_Message = Rswift.StringResource(key: "Location_Authorization_Denied_Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Device has no camera
      /// 
      /// Locales: Base
      static let alertNoCamera = Rswift.StringResource(key: "AlertNoCamera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Discover
      /// 
      /// Locales: Base
      static let discover = Rswift.StringResource(key: "Discover", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Don’t have an account?
      /// 
      /// Locales: Base
      static let donTHaveAnAccount = Rswift.StringResource(key: "Don’t have an account?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Email
      /// 
      /// Locales: Base
      static let email = Rswift.StringResource(key: "Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Email ID/ Phone Number
      /// 
      /// Locales: Base
      static let emailIDPhoneNumber = Rswift.StringResource(key: "Email ID/ Phone Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Email is not valid
      /// 
      /// Locales: Base
      static let emailIsNotValid = Rswift.StringResource(key: "Email is not valid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Email is required
      /// 
      /// Locales: Base
      static let emailIsRequired = Rswift.StringResource(key: "Email is required", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: First name
      /// 
      /// Locales: Base
      static let firstName = Rswift.StringResource(key: "First name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Forgot Password
      /// 
      /// Locales: Base
      static let forgot_Password = Rswift.StringResource(key: "Forgot_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Forgot Password?
      /// 
      /// Locales: Base
      static let forgotPassword = Rswift.StringResource(key: "Forgot Password?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: GET STARTED
      /// 
      /// Locales: Base
      static let gETSTARTED = Rswift.StringResource(key: "GET STARTED", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Help
      /// 
      /// Locales: Base
      static let help = Rswift.StringResource(key: "Help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Herbs are fun and easy to grow. When harvested they make even the simplest meal seem like a gourmet delight.
      /// 
      /// Locales: Base
      static let tutorial1 = Rswift.StringResource(key: "Tutorial1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Herbs are fun and easy to grow. When harvested they make even the simplest meal seem like a gourmet delight.
      /// 
      /// Locales: Base
      static let tutorial2 = Rswift.StringResource(key: "Tutorial2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Herbs are fun and easy to grow. When harvested they make even the simplest meal seem like a gourmet delight.
      /// 
      /// Locales: Base
      static let tutorial3 = Rswift.StringResource(key: "Tutorial3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Herbs are fun and easy to grow. When harvested they make even the simplest meal seem like a gourmet delight.
      /// 
      /// Locales: Base
      static let tutorial4 = Rswift.StringResource(key: "Tutorial4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Hide
      /// 
      /// Locales: Base
      static let hide = Rswift.StringResource(key: "Hide", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Home
      /// 
      /// Locales: Base
      static let home = Rswift.StringResource(key: "Home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Info
      /// 
      /// Locales: Base
      static let info = Rswift.StringResource(key: "Info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Last name
      /// 
      /// Locales: Base
      static let lastName = Rswift.StringResource(key: "Last name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Login
      /// 
      /// Locales: Base
      static let login = Rswift.StringResource(key: "Login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: My Address
      /// 
      /// Locales: Base
      static let myAddress = Rswift.StringResource(key: "MyAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: My Orders
      /// 
      /// Locales: Base
      static let myOrders = Rswift.StringResource(key: "MyOrders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: My Profile
      /// 
      /// Locales: Base
      static let myProfile = Rswift.StringResource(key: "MyProfile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Ok
      /// 
      /// Locales: Base
      static let ok = Rswift.StringResource(key: "Ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Password
      /// 
      /// Locales: Base
      static let password = Rswift.StringResource(key: "Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Password (6 Digit Password)
      /// 
      /// Locales: Base
      static let passwordPlaceholder = Rswift.StringResource(key: "passwordPlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Password must be Six characters
      /// 
      /// Locales: Base
      static let password_mustBeFourCharacters = Rswift.StringResource(key: "Password_must be four characters", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Password should be of atleast 6 characters
      /// 
      /// Locales: Base
      static let errorValidNewPassword = Rswift.StringResource(key: "ErrorValidNewPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Password should be of atleast 8 characters
      /// 
      /// Locales: Base
      static let errorPasswordLength = Rswift.StringResource(key: "ErrorPasswordLength", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Phone number
      /// 
      /// Locales: Base
      static let phoneNumber = Rswift.StringResource(key: "Phone number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please Enter OTP
      /// 
      /// Locales: Base
      static let errorPhoneCode = Rswift.StringResource(key: "ErrorPhoneCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter address
      /// 
      /// Locales: Base
      static let errorAddress = Rswift.StringResource(key: "ErrorAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter confirm password
      /// 
      /// Locales: Base
      static let errorConfirmPassword = Rswift.StringResource(key: "ErrorConfirmPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter correct OTP
      /// 
      /// Locales: Base
      static let errorCorrectCode = Rswift.StringResource(key: "ErrorCorrectCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter country code
      /// 
      /// Locales: Base
      static let errorCode = Rswift.StringResource(key: "ErrorCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter experience
      /// 
      /// Locales: Base
      static let errorExperience = Rswift.StringResource(key: "ErrorExperience", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter first name
      /// 
      /// Locales: Base
      static let errorFirstName = Rswift.StringResource(key: "ErrorFirstName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter last name
      /// 
      /// Locales: Base
      static let errorLastName = Rswift.StringResource(key: "ErrorLastName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter name
      /// 
      /// Locales: Base
      static let errorKitchName = Rswift.StringResource(key: "ErrorKitchName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter new password
      /// 
      /// Locales: Base
      static let errorNewPassword = Rswift.StringResource(key: "ErrorNewPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter new password
      /// 
      /// Locales: Base
      static let errorPassword = Rswift.StringResource(key: "ErrorPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter nick name
      /// 
      /// Locales: Base
      static let errorNickName = Rswift.StringResource(key: "ErrorNickName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter old password
      /// 
      /// Locales: Base
      static let errorOldPassword = Rswift.StringResource(key: "ErrorOldPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter phone number
      /// 
      /// Locales: Base
      static let errorPhoneNumber = Rswift.StringResource(key: "ErrorPhoneNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter restaurant name
      /// 
      /// Locales: Base
      static let errorRestaurantName = Rswift.StringResource(key: "ErrorRestaurantName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter user name
      /// 
      /// Locales: Base
      static let errorUserName = Rswift.StringResource(key: "ErrorUserName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter valid password
      /// 
      /// Locales: Base
      static let errorValidPassword = Rswift.StringResource(key: "ErrorValidPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Promotions
      /// 
      /// Locales: Base
      static let promotions = Rswift.StringResource(key: "Promotions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Refer a friend
      /// 
      /// Locales: Base
      static let referafriend = Rswift.StringResource(key: "Referafriend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Restaurants near you
      /// 
      /// Locales: Base
      static let restaurantsNearToYou = Rswift.StringResource(key: "Restaurants near you", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Show
      /// 
      /// Locales: Base
      static let show = Rswift.StringResource(key: "Show", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Sign in 
      /// 
      /// Locales: Base
      static let signIn = Rswift.StringResource(key: "Sign in ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Sign up
      /// 
      /// Locales: Base
      static let signUp = Rswift.StringResource(key: "Sign up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Sponsored
      /// 
      /// Locales: Base
      static let sponsored = Rswift.StringResource(key: "Sponsored", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Unknown
      /// 
      /// Locales: Base
      static let unknown = Rswift.StringResource(key: "Unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Username
      /// 
      /// Locales: Base
      static let username = Rswift.StringResource(key: "Username", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      
      /// Base translation: ******* ENGLISH  *********
      /// 
      /// Locales: Base
      static func currentLanguage(_: Void = ()) -> String {
        return NSLocalizedString("CurrentLanguage", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: A special character is mandatory
      /// 
      /// Locales: Base
      static func aSpecialCharacterIsMandatory(_: Void = ()) -> String {
        return NSLocalizedString("A special character is mandatory", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: A special symbol is mandatory
      /// 
      /// Locales: Base
      static func aSpecialSymbolIsMandatory(_: Void = ()) -> String {
        return NSLocalizedString("A special symbol is mandatory", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: All Fields ARE Filled = %@
      /// 
      /// Locales: Base
      static func allFieldsAREFilled(_ value1: String) -> String {
        return String(format: NSLocalizedString("All Fields ARE Filled", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: All Fields Are Validate = %@
      /// 
      /// Locales: Base
      static func allFieldsAreValidate(_ value1: String) -> String {
        return String(format: NSLocalizedString("All Fields Are Validate", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: By Signing up you agree to our Terms of Service & that you have read our Privacy Policy
      /// 
      /// Locales: Base
      static func tOSTitle(_: Void = ()) -> String {
        return NSLocalizedString("TOSTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: CREATE ACCOUNT
      /// 
      /// Locales: Base
      static func cREATEACCOUNT(_: Void = ()) -> String {
        return NSLocalizedString("CREATE ACCOUNT", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Cancel
      /// 
      /// Locales: Base
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Change Your Authorization Status
      /// 
      /// Locales: Base
      static func changeYourAuthorizationStatus(_: Void = ()) -> String {
        return NSLocalizedString("Change Your Authorization Status", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Chat Support
      /// 
      /// Locales: Base
      static func chatSupport(_: Void = ()) -> String {
        return NSLocalizedString("ChatSupport", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Check Validations
      /// 
      /// Locales: Base
      static func checkValidations(_: Void = ()) -> String {
        return NSLocalizedString("Check Validations", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Confirm Email
      /// 
      /// Locales: Base
      static func confirmEmail(_: Void = ()) -> String {
        return NSLocalizedString("Confirm Email", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Confirm Password (6 Digit Password)
      /// 
      /// Locales: Base
      static func confirmPasswordPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("confirmPasswordPlaceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Confirm password
      /// 
      /// Locales: Base
      static func confirmPassword(_: Void = ()) -> String {
        return NSLocalizedString("ConfirmPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Current Authorization status is Denied, Change the authorization status in Settings. To enable, please go to Settings->Privacy->Location Services
      /// 
      /// Locales: Base
      static func location_Authorization_Denied_Message(_: Void = ()) -> String {
        return NSLocalizedString("Location_Authorization_Denied_Message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Device has no camera
      /// 
      /// Locales: Base
      static func alertNoCamera(_: Void = ()) -> String {
        return NSLocalizedString("AlertNoCamera", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Discover
      /// 
      /// Locales: Base
      static func discover(_: Void = ()) -> String {
        return NSLocalizedString("Discover", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Don’t have an account?
      /// 
      /// Locales: Base
      static func donTHaveAnAccount(_: Void = ()) -> String {
        return NSLocalizedString("Don’t have an account?", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Email
      /// 
      /// Locales: Base
      static func email(_: Void = ()) -> String {
        return NSLocalizedString("Email", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Email ID/ Phone Number
      /// 
      /// Locales: Base
      static func emailIDPhoneNumber(_: Void = ()) -> String {
        return NSLocalizedString("Email ID/ Phone Number", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Email is not valid
      /// 
      /// Locales: Base
      static func emailIsNotValid(_: Void = ()) -> String {
        return NSLocalizedString("Email is not valid", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Email is required
      /// 
      /// Locales: Base
      static func emailIsRequired(_: Void = ()) -> String {
        return NSLocalizedString("Email is required", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: First name
      /// 
      /// Locales: Base
      static func firstName(_: Void = ()) -> String {
        return NSLocalizedString("First name", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Forgot Password
      /// 
      /// Locales: Base
      static func forgot_Password(_: Void = ()) -> String {
        return NSLocalizedString("Forgot_Password", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Forgot Password?
      /// 
      /// Locales: Base
      static func forgotPassword(_: Void = ()) -> String {
        return NSLocalizedString("Forgot Password?", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: GET STARTED
      /// 
      /// Locales: Base
      static func gETSTARTED(_: Void = ()) -> String {
        return NSLocalizedString("GET STARTED", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Help
      /// 
      /// Locales: Base
      static func help(_: Void = ()) -> String {
        return NSLocalizedString("Help", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Herbs are fun and easy to grow. When harvested they make even the simplest meal seem like a gourmet delight.
      /// 
      /// Locales: Base
      static func tutorial1(_: Void = ()) -> String {
        return NSLocalizedString("Tutorial1", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Herbs are fun and easy to grow. When harvested they make even the simplest meal seem like a gourmet delight.
      /// 
      /// Locales: Base
      static func tutorial2(_: Void = ()) -> String {
        return NSLocalizedString("Tutorial2", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Herbs are fun and easy to grow. When harvested they make even the simplest meal seem like a gourmet delight.
      /// 
      /// Locales: Base
      static func tutorial3(_: Void = ()) -> String {
        return NSLocalizedString("Tutorial3", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Herbs are fun and easy to grow. When harvested they make even the simplest meal seem like a gourmet delight.
      /// 
      /// Locales: Base
      static func tutorial4(_: Void = ()) -> String {
        return NSLocalizedString("Tutorial4", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Hide
      /// 
      /// Locales: Base
      static func hide(_: Void = ()) -> String {
        return NSLocalizedString("Hide", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Home
      /// 
      /// Locales: Base
      static func home(_: Void = ()) -> String {
        return NSLocalizedString("Home", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Info
      /// 
      /// Locales: Base
      static func info(_: Void = ()) -> String {
        return NSLocalizedString("Info", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Last name
      /// 
      /// Locales: Base
      static func lastName(_: Void = ()) -> String {
        return NSLocalizedString("Last name", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Login
      /// 
      /// Locales: Base
      static func login(_: Void = ()) -> String {
        return NSLocalizedString("Login", bundle: R.hostingBundle, comment: "")
      }
        
        /// Base translation: Logout
        ///
        /// Locales: Base
        static func logout(_: Void = ()) -> String {
            return NSLocalizedString("Logout", bundle: R.hostingBundle, comment: "")
        }
        
      /// Base translation: My Address
      /// 
      /// Locales: Base
      static func myAddress(_: Void = ()) -> String {
        return NSLocalizedString("MyAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: My Orders
      /// 
      /// Locales: Base
      static func myOrders(_: Void = ()) -> String {
        return NSLocalizedString("MyOrders", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: My Profile
      /// 
      /// Locales: Base
      static func myProfile(_: Void = ()) -> String {
        return NSLocalizedString("MyProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Ok
      /// 
      /// Locales: Base
      static func ok(_: Void = ()) -> String {
        return NSLocalizedString("Ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Password
      /// 
      /// Locales: Base
      static func password(_: Void = ()) -> String {
        return NSLocalizedString("Password", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Password (6 Digit Password)
      /// 
      /// Locales: Base
      static func passwordPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("passwordPlaceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Password must be Six characters
      /// 
      /// Locales: Base
      static func password_mustBeFourCharacters(_: Void = ()) -> String {
        return NSLocalizedString("Password_must be four characters", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Password should be of atleast 6 characters
      /// 
      /// Locales: Base
      static func errorValidNewPassword(_: Void = ()) -> String {
        return NSLocalizedString("ErrorValidNewPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Password should be of atleast 8 characters
      /// 
      /// Locales: Base
      static func errorPasswordLength(_: Void = ()) -> String {
        return NSLocalizedString("ErrorPasswordLength", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Phone number
      /// 
      /// Locales: Base
      static func phoneNumber(_: Void = ()) -> String {
        return NSLocalizedString("Phone number", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please Enter OTP
      /// 
      /// Locales: Base
      static func errorPhoneCode(_: Void = ()) -> String {
        return NSLocalizedString("ErrorPhoneCode", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter address
      /// 
      /// Locales: Base
      static func errorAddress(_: Void = ()) -> String {
        return NSLocalizedString("ErrorAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter confirm password
      /// 
      /// Locales: Base
      static func errorConfirmPassword(_: Void = ()) -> String {
        return NSLocalizedString("ErrorConfirmPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter correct OTP
      /// 
      /// Locales: Base
      static func errorCorrectCode(_: Void = ()) -> String {
        return NSLocalizedString("ErrorCorrectCode", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter country code
      /// 
      /// Locales: Base
      static func errorCode(_: Void = ()) -> String {
        return NSLocalizedString("ErrorCode", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter experience
      /// 
      /// Locales: Base
      static func errorExperience(_: Void = ()) -> String {
        return NSLocalizedString("ErrorExperience", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter first name
      /// 
      /// Locales: Base
      static func errorFirstName(_: Void = ()) -> String {
        return NSLocalizedString("ErrorFirstName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter last name
      /// 
      /// Locales: Base
      static func errorLastName(_: Void = ()) -> String {
        return NSLocalizedString("ErrorLastName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter name
      /// 
      /// Locales: Base
      static func errorKitchName(_: Void = ()) -> String {
        return NSLocalizedString("ErrorKitchName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter new password
      /// 
      /// Locales: Base
      static func errorNewPassword(_: Void = ()) -> String {
        return NSLocalizedString("ErrorNewPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter new password
      /// 
      /// Locales: Base
      static func errorPassword(_: Void = ()) -> String {
        return NSLocalizedString("ErrorPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter nick name
      /// 
      /// Locales: Base
      static func errorNickName(_: Void = ()) -> String {
        return NSLocalizedString("ErrorNickName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter old password
      /// 
      /// Locales: Base
      static func errorOldPassword(_: Void = ()) -> String {
        return NSLocalizedString("ErrorOldPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter phone number
      /// 
      /// Locales: Base
      static func errorPhoneNumber(_: Void = ()) -> String {
        return NSLocalizedString("ErrorPhoneNumber", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter restaurant name
      /// 
      /// Locales: Base
      static func errorRestaurantName(_: Void = ()) -> String {
        return NSLocalizedString("ErrorRestaurantName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter user name
      /// 
      /// Locales: Base
      static func errorUserName(_: Void = ()) -> String {
        return NSLocalizedString("ErrorUserName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter valid password
      /// 
      /// Locales: Base
      static func errorValidPassword(_: Void = ()) -> String {
        return NSLocalizedString("ErrorValidPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Promotions
      /// 
      /// Locales: Base
      static func promotions(_: Void = ()) -> String {
        return NSLocalizedString("Promotions", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Refer a friend
      /// 
      /// Locales: Base
      static func referafriend(_: Void = ()) -> String {
        return NSLocalizedString("Referafriend", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Restaurants near you
      /// 
      /// Locales: Base
      static func restaurantsNearToYou(_: Void = ()) -> String {
        return NSLocalizedString("Restaurants near you", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Show
      /// 
      /// Locales: Base
      static func show(_: Void = ()) -> String {
        return NSLocalizedString("Show", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Sign in 
      /// 
      /// Locales: Base
      static func signIn(_: Void = ()) -> String {
        return NSLocalizedString("Sign in ", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Sign up
      /// 
      /// Locales: Base
      static func signUp(_: Void = ()) -> String {
        return NSLocalizedString("Sign up", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Sponsored
      /// 
      /// Locales: Base
      static func sponsored(_: Void = ()) -> String {
        return NSLocalizedString("Sponsored", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Unknown
      /// 
      /// Locales: Base
      static func unknown(_: Void = ()) -> String {
        return NSLocalizedString("Unknown", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Username
      /// 
      /// Locales: Base
      static func username(_: Void = ()) -> String {
        return NSLocalizedString("Username", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AddMoreItemView.validate()
      try _RestaurentCollectionViewCell.validate()
      try _GridCollectionView.validate()
      try _MapCollectionViewCell.validate()
      try _MenuTableViewCell.validate()
      try _GridMenuCollectioncell.validate()
      try _CLCountryCell.validate()
    }
    
    struct _AddMoreItemView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddMoreItemView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey  : AnyObject]? = nil) -> AddMoreItemView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddMoreItemView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_subtract") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_subtract' is used in nib 'AddMoreItemView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add' is used in nib 'AddMoreItemView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CLCountryCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CLCountryCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey  : AnyObject]? = nil) -> CLCountryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CLCountryCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "tickMark") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tickMark' is used in nib 'CLCountryCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CLCountryPickerController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CLCountryPickerController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey  : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _CustomMenuItem: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomMenuItem"
      
//      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CustomMenuItem? {
//        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomMenuItem
//      }
      
      fileprivate init() {}
    }
    
    struct _FieldCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FieldCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey  : AnyObject]? = nil) -> FieldCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FieldCell
      }
      
      fileprivate init() {}
    }
    
    struct _GridCollectionView: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = GridCollectionView
      
      let bundle = R.hostingBundle
      let identifier = "GridCollectionView"
      let name = "GridCollectionView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey  : AnyObject]? = nil) -> GridCollectionView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GridCollectionView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_delivery") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delivery' is used in nib 'GridCollectionView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_card") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_card' is used in nib 'GridCollectionView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_time") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_time' is used in nib 'GridCollectionView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_amount") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_amount' is used in nib 'GridCollectionView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_burgergrill") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_burgergrill' is used in nib 'GridCollectionView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cash") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cash' is used in nib 'GridCollectionView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _GridMenuCollectioncell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = GridMenuCollectioncell
      
      let bundle = R.hostingBundle
      let identifier = "GridMenuCollectioncell"
      let name = "GridMenuCollectioncell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey  : AnyObject]? = nil) -> GridMenuCollectioncell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GridMenuCollectioncell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_nonVeg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_nonVeg' is used in nib 'GridMenuCollectioncell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ChickenRoll") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ChickenRoll' is used in nib 'GridMenuCollectioncell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MapCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MapCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MapCollectionViewCell"
      let name = "MapCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey  : AnyObject]? = nil) -> MapCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MapCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "foodstarPlaceholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'foodstarPlaceholder' is used in nib 'MapCollectionViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MenuTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MenuTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MenuTableViewCell"
      let name = "MenuTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey  : AnyObject]? = nil) -> MenuTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_nonVeg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_nonVeg' is used in nib 'MenuTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_sponser") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_sponser' is used in nib 'MenuTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _RestaurantItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RestaurantItemCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "RestaurantItemCollectionViewCell"
      let name = "RestaurantItemCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey  : AnyObject]? = nil) -> RestaurantItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RestaurantItemCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _RestaurentCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RestaurentCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "RestaurentCollectionViewCell"
      let name = "RestaurentCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey  : AnyObject]? = nil) -> RestaurentCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RestaurentCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_delivery") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delivery' is used in nib 'RestaurentCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_card") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_card' is used in nib 'RestaurentCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_time") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_time' is used in nib 'RestaurentCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_amount") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_amount' is used in nib 'RestaurentCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_burgergrill") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_burgergrill' is used in nib 'RestaurentCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cash") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cash' is used in nib 'RestaurentCollectionViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SideMenuCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SideMenuCell
      let bundle = R.hostingBundle
      let identifier = "SideMenuCell"
      let name = "SideMenuCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : AnyObject]? = nil) -> SideMenuCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SideMenuCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try home.validate()
      try launchScreen.validate()
    }
    
    struct home: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let chatSupportController = StoryboardViewControllerResource<ChatSupportController>(identifier: "ChatSupportController")
    let liveZillaChatVc = StoryboardViewControllerResource<LiveZillaChatVc>(identifier: "LiveZillaChatVc")
      let editProfileController = StoryboardViewControllerResource<EditProfileController>(identifier: "EditProfileController")
      let helpCenterViewController = StoryboardViewControllerResource<HelpCenterViewController>(identifier: "HelpCenterViewController")
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let infoController = StoryboardViewControllerResource<InfoController>(identifier: "InfoController")
      let mapViewController = StoryboardViewControllerResource<MapViewController>(identifier: "MapViewController")
      
      let myAddressController = StoryboardViewControllerResource<MyAddressController>(identifier: "MyAddressController")
      let myOrderController = StoryboardViewControllerResource<MyOrderController>(identifier: "MyOrderController")
      let myProfileController = StoryboardViewControllerResource<MyProfileController>(identifier: "MyProfileController")
    let SettingViewController = StoryboardViewControllerResource<SettingViewController>(identifier: "SettingViewController")
        
        
        
      let name = "Home"
      let onlineMenuDetails = StoryboardViewControllerResource<OnlineMenuDetails>(identifier: "OnlineMenuDetails")
      let promotionsController = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "PromotionsController")
      let referController = StoryboardViewControllerResource<ReferController>(identifier: "ReferController")
      let restaurantMenuDetails = StoryboardViewControllerResource<RestaurantMenuDetails>(identifier: "RestaurantMenuDetails")
      let searchRestaurantViewController = StoryboardViewControllerResource<SearchRestaurantViewController>(identifier: "SearchRestaurantViewController")
      let sideMenuController = StoryboardViewControllerResource<SideMenuController>(identifier: "SideMenuController")
      let restaurantBranchesController = StoryboardViewControllerResource<RestaurantBranchesController>(identifier: "RestaurantBranchesController")
      let addOnItemController = StoryboardViewControllerResource<AddOnItemController>(identifier: "AddOnItemController")
      let viewCartController = StoryboardViewControllerResource<ViewCartController>(identifier: "ViewCartController")
        
     
        
        
        func SettingViewController(_: Void = ()) -> SettingViewController? {
            return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: SettingViewController)
        }
        
      func chatSupportController(_: Void = ()) -> ChatSupportController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatSupportController)
      }
        func liveZillaChatVc(_: Void = ()) -> LiveZillaChatVc? {
            return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: liveZillaChatVc)
        }
      
      func editProfileController(_: Void = ()) -> EditProfileController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileController)
      }
      
      func helpCenterViewController(_: Void = ()) -> HelpCenterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: helpCenterViewController)
      }
      
      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }
      
      func infoController(_: Void = ()) -> InfoController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: infoController)
      }
      
      func mapViewController(_: Void = ()) -> MapViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mapViewController)
      }
      
      
      func myAddressController(_: Void = ()) -> MyAddressController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myAddressController)
      }
      
      func myOrderController(_: Void = ()) -> MyOrderController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myOrderController)
      }
      
      func myProfileController(_: Void = ()) -> MyProfileController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myProfileController)
      }
      
      func onlineMenuDetails(_: Void = ()) -> OnlineMenuDetails? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onlineMenuDetails)
      }
      
      func promotionsController(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: promotionsController)
      }
      
      func referController(_: Void = ()) -> ReferController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: referController)
      }
      
      func restaurantMenuDetails(_: Void = ()) -> RestaurantMenuDetails? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: restaurantMenuDetails)
      }
      
      func searchRestaurantViewController(_: Void = ()) -> SearchRestaurantViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchRestaurantViewController)
      }
        
      func sideMenuController(_: Void = ()) -> SideMenuController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sideMenuController)
       }
        
        func restaurantBranchesController(_: Void = ()) -> RestaurantBranchesController? {
            return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: restaurantBranchesController)
        }
        
        func addOnItemController(_: Void = ()) -> AddOnItemController? {
            return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addOnItemController)
        }
        func viewCartController(_: Void = ()) -> ViewCartController? {
            return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: viewCartController)
        }
        
        //MARK:- VALIDATE STORY BOARD IDENTIFIER
      static func validate() throws {
        if UIKit.UIImage(named: "menuItem") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menuItem' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_sponser") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_sponser' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_bg_normal") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bg_normal' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cart") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cash") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cash' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_time") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_time' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_indian") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_indian' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-White") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-White' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "135F1A8F-5452-4667-9277-0D4D9353680C") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '135F1A8F-5452-4667-9277-0D4D9353680C' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_homeDelivery") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_homeDelivery' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dropdown") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dropdown' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "burgrill") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'burgrill' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_grid") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_grid' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_settings") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_settings' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_amount") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_amount' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_selfPickup") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_selfPickup' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "restaurant") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'restaurant' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "call") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'call' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_card") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_card' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_sideMenuBg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_sideMenuBg' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_delivery") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delivery' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "camera") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'camera' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_placeholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_placeholder' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_maps") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_maps' is used in storyboard 'Home', but couldn't be loaded.") }
        if _R.storyboard.home().sideMenuController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sideMenuController' could not be loaded from storyboard 'Home' as 'SideMenuController'.") }
        if _R.storyboard.home().editProfileController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileController' could not be loaded from storyboard 'Home' as 'EditProfileController'.") }
        if _R.storyboard.home().chatSupportController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatSupportController' could not be loaded from storyboard 'Home' as 'ChatSupportController'.") }
        if _R.storyboard.home().myAddressController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myAddressController' could not be loaded from storyboard 'Home' as 'MyAddressController'.") }
        if _R.storyboard.home().searchRestaurantViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchRestaurantViewController' could not be loaded from storyboard 'Home' as 'SearchRestaurantViewController'.") }
        if _R.storyboard.home().restaurantMenuDetails() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'restaurantMenuDetails' could not be loaded from storyboard 'Home' as 'RestaurantMenuDetails'.") }
    
        if _R.storyboard.home().myOrderController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myOrderController' could not be loaded from storyboard 'Home' as 'MyOrderController'.") }
        if _R.storyboard.home().infoController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'infoController' could not be loaded from storyboard 'Home' as 'InfoController'.") }
        if _R.storyboard.home().onlineMenuDetails() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onlineMenuDetails' could not be loaded from storyboard 'Home' as 'OnlineMenuDetails'.") }
        if _R.storyboard.home().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Home' as 'HomeViewController'.") }
        if _R.storyboard.home().myProfileController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myProfileController' could not be loaded from storyboard 'Home' as 'MyProfileController'.") }
        if _R.storyboard.home().promotionsController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'promotionsController' could not be loaded from storyboard 'Home' as 'UIKit.UIViewController'.") }
        if _R.storyboard.home().helpCenterViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'helpCenterViewController' could not be loaded from storyboard 'Home' as 'HelpCenterViewController'.") }
        if _R.storyboard.home().referController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'referController' could not be loaded from storyboard 'Home' as 'ReferController'.") }
        if _R.storyboard.home().mapViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mapViewController' could not be loaded from storyboard 'Home' as 'MapViewController'.") }
        if _R.storyboard.home().restaurantBranchesController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'restaurantBranchesController' could not be loaded from storyboard 'Home' as 'RestaurantBranchesController'.") }
         if _R.storyboard.home().addOnItemController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addOnItemController' could not be loaded from storyboard 'Home' as 'addOnItemController'.") }
        if _R.storyboard.home().viewCartController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'viewCartController' could not be loaded from storyboard 'Home' as 'viewCartController'.") }
        if _R.storyboard.home().SettingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'SettingViewController' could not be loaded from storyboard 'Home' as 'SettingViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_launch") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_launch' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logoSplash") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logoSplash' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let changeMobileNumberViewController = StoryboardViewControllerResource<ChangeMobileNumberViewController>(identifier: "ChangeMobileNumberViewController")
      let chooseDeliveryController = StoryboardViewControllerResource<ChooseDeliveryController>(identifier: "ChooseDeliveryController")
      let forgotPasswordViewController = StoryboardViewControllerResource<ForgotPasswordViewController>(identifier: "ForgotPasswordViewController")
      let launchLogin = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "LaunchLogin")
      let launchTutorial = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "LaunchTutorial")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Main"
      let oTPViewController = StoryboardViewControllerResource<OTPViewController>(identifier: "OTPViewController")
      let preSignUpController = StoryboardViewControllerResource<PreSignUpController>(identifier: "PreSignUpController")
      let resetPasswordController = StoryboardViewControllerResource<ResetPasswordController>(identifier: "ResetPasswordController")
      let rootViewController = StoryboardViewControllerResource<RootViewController>(identifier: "RootViewController")
      let rootViewControllerNav = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "RootViewControllerNav")
      let signInController = StoryboardViewControllerResource<SignInController>(identifier: "SignInController")
      let signUpController = StoryboardViewControllerResource<SignUpController>(identifier: "SignUpController")
      let signupViewController = StoryboardViewControllerResource<SignupViewController>(identifier: "SignupViewController")
      let tutorialContainerController = StoryboardViewControllerResource<TutorialContainerController>(identifier: "TutorialContainerController")
      
      func changeMobileNumberViewController(_: Void = ()) -> ChangeMobileNumberViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changeMobileNumberViewController)
      }
      
      func chooseDeliveryController(_: Void = ()) -> ChooseDeliveryController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chooseDeliveryController)
      }
      
      func forgotPasswordViewController(_: Void = ()) -> ForgotPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordViewController)
      }
      
      func launchLogin(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: launchLogin)
      }
      
      func launchTutorial(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: launchTutorial)
      }
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      func oTPViewController(_: Void = ()) -> OTPViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: oTPViewController)
      }
      
      func preSignUpController(_: Void = ()) -> PreSignUpController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: preSignUpController)
      }
      
      func resetPasswordController(_: Void = ()) -> ResetPasswordController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPasswordController)
      }
      
      func rootViewController(_: Void = ()) -> RootViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rootViewController)
      }
      
      func rootViewControllerNav(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rootViewControllerNav)
      }
      
      func signInController(_: Void = ()) -> SignInController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signInController)
      }
      
      func signUpController(_: Void = ()) -> SignUpController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpController)
      }
      
      func signupViewController(_: Void = ()) -> SignupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupViewController)
      }
      
      func tutorialContainerController(_: Void = ()) -> TutorialContainerController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tutorialContainerController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_cancel") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cancel' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tutorial1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tutorial1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tutorial_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tutorial_logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_bg_normal") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bg_normal' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_bg_blur") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bg_blur' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_selfPickup") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_selfPickup' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "GoogleIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'GoogleIcon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_bg_signUp") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bg_signUp' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CL-Logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CL-Logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_twitterLogo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_twitterLogo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebookIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebookIcon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_google") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_google' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logo_small") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo_small' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bitmap img") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bitmap img' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_placeholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_placeholder' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_fb") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_fb' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_homeDelivery") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_homeDelivery' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().signInController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signInController' could not be loaded from storyboard 'Main' as 'SignInController'.") }
        if _R.storyboard.main().signupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupViewController' could not be loaded from storyboard 'Main' as 'SignupViewController'.") }
        if _R.storyboard.main().oTPViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'oTPViewController' could not be loaded from storyboard 'Main' as 'OTPViewController'.") }
        if _R.storyboard.main().rootViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rootViewController' could not be loaded from storyboard 'Main' as 'RootViewController'.") }
        if _R.storyboard.main().signUpController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpController' could not be loaded from storyboard 'Main' as 'SignUpController'.") }
        if _R.storyboard.main().preSignUpController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'preSignUpController' could not be loaded from storyboard 'Main' as 'PreSignUpController'.") }
        if _R.storyboard.main().changeMobileNumberViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changeMobileNumberViewController' could not be loaded from storyboard 'Main' as 'ChangeMobileNumberViewController'.") }
        if _R.storyboard.main().launchLogin() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'launchLogin' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().tutorialContainerController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tutorialContainerController' could not be loaded from storyboard 'Main' as 'TutorialContainerController'.") }
        if _R.storyboard.main().resetPasswordController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPasswordController' could not be loaded from storyboard 'Main' as 'ResetPasswordController'.") }
        if _R.storyboard.main().chooseDeliveryController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chooseDeliveryController' could not be loaded from storyboard 'Main' as 'ChooseDeliveryController'.") }
        if _R.storyboard.main().forgotPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordViewController' could not be loaded from storyboard 'Main' as 'ForgotPasswordViewController'.") }
        if _R.storyboard.main().rootViewControllerNav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rootViewControllerNav' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().launchTutorial() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'launchTutorial' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Main' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
